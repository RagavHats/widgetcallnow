{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","togglemenu","bind","state","showMenu","fabs","icons","linksrc","chatbox","closecap","labelname","phone_number","imge_src","axios","get","then","response","setState","data","labels","feature_img","console","log","catch","error","e","this","className","align","src","style","width","height","id","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,+KC+G5BC,E,kDArGb,WAAYC,GAAO,IAAD,8BACZ,cAAMA,IAEFC,WAAa,EAAKA,WAAWC,KAAhB,gBAEjB,EAAKC,MAAQ,CACTC,UAAW,EACXC,KAAO,OACPC,MAAQ,2CACRC,QAAS,MACTC,QAAS,OACTC,SAAW,qCACXC,UAAW,GACXC,aAAa,GACbC,SAAU,IAdF,E,gEAoBG,IAAD,OACpBC,IAAMC,IAAI,oDACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACLP,UAAYM,EAASE,KAAK,eAAeC,OAC1CR,aAAcK,EAASE,KAAK,eAAeP,aAC3CC,SAAW,0CAA4CI,EAASE,KAAK,eAAeE,cAI5FC,QAAQC,IAAIN,EAASE,KAAK,mBAE3BK,OAAM,SAAAC,GACLH,QAAQC,IAAIE,Q,iCAOHC,GACTJ,QAAQC,IAAII,KAAKvB,MAAMC,WACI,IAAxBsB,KAAKvB,MAAMC,UAEZsB,KAAKT,SAAS,CACRZ,KAAO,aACPC,MAAQ,wDACRC,QAAS,0BACTC,QAAS,kBACTC,SAAW,wDACXL,UAAW,KAKS,IAAxBsB,KAAKvB,MAAMC,UACbsB,KAAKT,SAAS,CACRZ,KAAO,OACPC,MAAQ,2CACRC,QAAS,MACTC,QAAS,OACTC,SAAW,qCACXL,UAAW,M,+BAOrB,OACE,yBAAKuB,UAAU,OACb,yBAAKC,MAAM,YACP,wEAEA,yBAAKC,IAAKH,KAAKvB,MAAMS,SAAUkB,MAAO,CAACC,MAAM,OAAOC,OAAO,UAG/D,yBAAKL,UAAU,QACb,yBAAKA,UAAWD,KAAKvB,MAAMK,SACzB,yBAAKmB,UAAU,eACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,cACjB,yBAAKE,IAAK,oFAER,0BAAMI,GAAG,aAAaP,KAAKvB,MAAMO,UAAjC,SACF,6BACA,0BAAMiB,UAAU,SAChB,uBAAGO,KAAI,cAASR,KAAKvB,MAAMQ,cAAgBgB,UAAU,cAArD,KAAoE,uBAAGA,UAAU,wCAC/ED,KAAKvB,MAAMQ,kBAIjB,uBAAGsB,GAAG,QAASN,UAAWD,KAAKvB,MAAMI,QAAS4B,QAAST,KAAKzB,YAC1D,uBAAG0B,UAAWD,KAAKvB,MAAMG,e,GAlGjB8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM4B,c","file":"static/js/main.a94515a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {Component , useEffect }from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends Component {\n  \n\n  // create a initial  state for declaring the class name\n\n  constructor(props){\n        super(props);\n        \n       this.togglemenu = this.togglemenu.bind(this);\n\n        this.state = {\n            showMenu : false,\n            fabs : 'fabs',\n            icons : \"text-white prime zmdi zmdi-phone-in-talk\",\n            linksrc :\"fab\",\n            chatbox :\"chat\",\n            closecap : \"text-white zmdi zmdi-phone-in-talk\",\n            labelname :\"\",\n            phone_number:\"\",\n            imge_src :\"\"\n        }\n    }\n\n\n\n  componentDidMount() {\n  axios.get('https://codifyinditest.com/script_test/api-test/')\n  .then(response => {\n    this.setState({\n             labelname : response.data[\"script test\"].labels,\n            phone_number: response.data[\"script test\"].phone_number,\n            imge_src : \"https://codifyinditest.com/script_test/\" + response.data[\"script test\"].feature_img,\n        });\n\n\n    console.log(response.data[\"script test\"]);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n}\n  \n\n\n  // toggle menu option is used to toggle the class name according to it ....\n  togglemenu(e) {\n    console.log(this.state.showMenu )\n    if(this.state.showMenu === false)\n    {\n      this.setState({\n            fabs : \"is-visible\",\n            icons : \"text-white prime zmdi zmdi-close is-active is-visible\",\n            linksrc :\"fab is-float is-visible\",\n            chatbox :\"chat is-visible\",\n            closecap : \"text-white prime zmdi zmdi-close is-active is-visible\",\n            showMenu : true\n        });\n\n    }\n    \n     if(this.state.showMenu === true){\n      this.setState({\n            fabs : 'fabs',\n            icons : \"text-white prime zmdi zmdi-phone-in-talk\",\n            linksrc :\"fab\",\n            chatbox :\"chat\",\n            closecap : \"text-white zmdi zmdi-phone-in-talk\",\n            showMenu : false\n       });\n    }\n }\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <div align=\"center  \">\n          <h2>Call Now Widget on bottom of the Website</h2>\n\n          <img src={this.state.imge_src} style={{width:'100%',height:'50%'}}/>\n      </div>\n\n      <div className=\"fabs\">\n        <div className={this.state.chatbox}>\n          <div className=\"chat_header\">\n            <div className=\"chat_option\">\n              <div className=\"header_img\">\n            <img src={\"http://res.cloudinary.com/dqvwa7vpe/image/upload/v1496415051/avatar_ma6vug.jpg\"}/>\n          </div>\n              <span id=\"chat_head\">{this.state.labelname} Now </span> \n            <br/>\n            <span className=\"agent\">\n            <a href={`tel:${this.state.phone_number}`} className=\"text-white\">  <i className=\"text-white zmdi zmdi-phone-in-talk \"></i>\n             {this.state.phone_number}</a></span>\n            </div>\n          </div>\n        </div>\n        <a id=\"prime\"  className={this.state.linksrc} onClick={this.togglemenu}>\n          <i className={this.state.icons}></i></a>\n      </div>\n\t\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}